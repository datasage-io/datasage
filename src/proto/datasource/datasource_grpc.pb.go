// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: datasource.proto

package datasource

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatasourceClient is the client API for Datasource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatasourceClient interface {
	AddDatasource(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (Datasource_AddDatasourceClient, error)
	ListDatasource(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Datasource_ListDatasourceClient, error)
	DeleteDatasource(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (Datasource_DeleteDatasourceClient, error)
}

type datasourceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatasourceClient(cc grpc.ClientConnInterface) DatasourceClient {
	return &datasourceClient{cc}
}

func (c *datasourceClient) AddDatasource(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (Datasource_AddDatasourceClient, error) {
	stream, err := c.cc.NewStream(ctx, &Datasource_ServiceDesc.Streams[0], "/datasource.Datasource/AddDatasource", opts...)
	if err != nil {
		return nil, err
	}
	x := &datasourceAddDatasourceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Datasource_AddDatasourceClient interface {
	Recv() (*MessageResponse, error)
	grpc.ClientStream
}

type datasourceAddDatasourceClient struct {
	grpc.ClientStream
}

func (x *datasourceAddDatasourceClient) Recv() (*MessageResponse, error) {
	m := new(MessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *datasourceClient) ListDatasource(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Datasource_ListDatasourceClient, error) {
	stream, err := c.cc.NewStream(ctx, &Datasource_ServiceDesc.Streams[1], "/datasource.Datasource/ListDatasource", opts...)
	if err != nil {
		return nil, err
	}
	x := &datasourceListDatasourceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Datasource_ListDatasourceClient interface {
	Recv() (*ListResponse, error)
	grpc.ClientStream
}

type datasourceListDatasourceClient struct {
	grpc.ClientStream
}

func (x *datasourceListDatasourceClient) Recv() (*ListResponse, error) {
	m := new(ListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *datasourceClient) DeleteDatasource(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (Datasource_DeleteDatasourceClient, error) {
	stream, err := c.cc.NewStream(ctx, &Datasource_ServiceDesc.Streams[2], "/datasource.Datasource/DeleteDatasource", opts...)
	if err != nil {
		return nil, err
	}
	x := &datasourceDeleteDatasourceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Datasource_DeleteDatasourceClient interface {
	Recv() (*MessageResponse, error)
	grpc.ClientStream
}

type datasourceDeleteDatasourceClient struct {
	grpc.ClientStream
}

func (x *datasourceDeleteDatasourceClient) Recv() (*MessageResponse, error) {
	m := new(MessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DatasourceServer is the server API for Datasource service.
// All implementations must embed UnimplementedDatasourceServer
// for forward compatibility
type DatasourceServer interface {
	AddDatasource(*AddRequest, Datasource_AddDatasourceServer) error
	ListDatasource(*ListRequest, Datasource_ListDatasourceServer) error
	DeleteDatasource(*DeleteRequest, Datasource_DeleteDatasourceServer) error
	mustEmbedUnimplementedDatasourceServer()
}

// UnimplementedDatasourceServer must be embedded to have forward compatible implementations.
type UnimplementedDatasourceServer struct {
}

func (UnimplementedDatasourceServer) AddDatasource(*AddRequest, Datasource_AddDatasourceServer) error {
	return status.Errorf(codes.Unimplemented, "method AddDatasource not implemented")
}
func (UnimplementedDatasourceServer) ListDatasource(*ListRequest, Datasource_ListDatasourceServer) error {
	return status.Errorf(codes.Unimplemented, "method ListDatasource not implemented")
}
func (UnimplementedDatasourceServer) DeleteDatasource(*DeleteRequest, Datasource_DeleteDatasourceServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteDatasource not implemented")
}
func (UnimplementedDatasourceServer) mustEmbedUnimplementedDatasourceServer() {}

// UnsafeDatasourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatasourceServer will
// result in compilation errors.
type UnsafeDatasourceServer interface {
	mustEmbedUnimplementedDatasourceServer()
}

func RegisterDatasourceServer(s grpc.ServiceRegistrar, srv DatasourceServer) {
	s.RegisterService(&Datasource_ServiceDesc, srv)
}

func _Datasource_AddDatasource_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AddRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatasourceServer).AddDatasource(m, &datasourceAddDatasourceServer{stream})
}

type Datasource_AddDatasourceServer interface {
	Send(*MessageResponse) error
	grpc.ServerStream
}

type datasourceAddDatasourceServer struct {
	grpc.ServerStream
}

func (x *datasourceAddDatasourceServer) Send(m *MessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Datasource_ListDatasource_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatasourceServer).ListDatasource(m, &datasourceListDatasourceServer{stream})
}

type Datasource_ListDatasourceServer interface {
	Send(*ListResponse) error
	grpc.ServerStream
}

type datasourceListDatasourceServer struct {
	grpc.ServerStream
}

func (x *datasourceListDatasourceServer) Send(m *ListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Datasource_DeleteDatasource_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeleteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatasourceServer).DeleteDatasource(m, &datasourceDeleteDatasourceServer{stream})
}

type Datasource_DeleteDatasourceServer interface {
	Send(*MessageResponse) error
	grpc.ServerStream
}

type datasourceDeleteDatasourceServer struct {
	grpc.ServerStream
}

func (x *datasourceDeleteDatasourceServer) Send(m *MessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Datasource_ServiceDesc is the grpc.ServiceDesc for Datasource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Datasource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datasource.Datasource",
	HandlerType: (*DatasourceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddDatasource",
			Handler:       _Datasource_AddDatasource_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListDatasource",
			Handler:       _Datasource_ListDatasource_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteDatasource",
			Handler:       _Datasource_DeleteDatasource_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "datasource.proto",
}
