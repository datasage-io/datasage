// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: src/proto/datasource/datasource.proto

package datasource

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatasourceClient is the client API for Datasource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatasourceClient interface {
	ListDatasources(ctx context.Context, in *ListDatasourceRequest, opts ...grpc.CallOption) (*ListDatasourceResponse, error)
	DeleteDatasources(ctx context.Context, in *DeleteDatasourceRequest, opts ...grpc.CallOption) (*DeleteDatasourceResponse, error)
}

type datasourceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatasourceClient(cc grpc.ClientConnInterface) DatasourceClient {
	return &datasourceClient{cc}
}

func (c *datasourceClient) ListDatasources(ctx context.Context, in *ListDatasourceRequest, opts ...grpc.CallOption) (*ListDatasourceResponse, error) {
	out := new(ListDatasourceResponse)
	err := c.cc.Invoke(ctx, "/datasource.Datasource/ListDatasources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasourceClient) DeleteDatasources(ctx context.Context, in *DeleteDatasourceRequest, opts ...grpc.CallOption) (*DeleteDatasourceResponse, error) {
	out := new(DeleteDatasourceResponse)
	err := c.cc.Invoke(ctx, "/datasource.Datasource/DeleteDatasources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasourceServer is the server API for Datasource service.
// All implementations must embed UnimplementedDatasourceServer
// for forward compatibility
type DatasourceServer interface {
	ListDatasources(context.Context, *ListDatasourceRequest) (*ListDatasourceResponse, error)
	DeleteDatasources(context.Context, *DeleteDatasourceRequest) (*DeleteDatasourceResponse, error)
	mustEmbedUnimplementedDatasourceServer()
}

// UnimplementedDatasourceServer must be embedded to have forward compatible implementations.
type UnimplementedDatasourceServer struct {
}

func (UnimplementedDatasourceServer) ListDatasources(context.Context, *ListDatasourceRequest) (*ListDatasourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatasources not implemented")
}
func (UnimplementedDatasourceServer) DeleteDatasources(context.Context, *DeleteDatasourceRequest) (*DeleteDatasourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatasources not implemented")
}
func (UnimplementedDatasourceServer) mustEmbedUnimplementedDatasourceServer() {}

// UnsafeDatasourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatasourceServer will
// result in compilation errors.
type UnsafeDatasourceServer interface {
	mustEmbedUnimplementedDatasourceServer()
}

func RegisterDatasourceServer(s grpc.ServiceRegistrar, srv DatasourceServer) {
	s.RegisterService(&Datasource_ServiceDesc, srv)
}

func _Datasource_ListDatasources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasourceServer).ListDatasources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.Datasource/ListDatasources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasourceServer).ListDatasources(ctx, req.(*ListDatasourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datasource_DeleteDatasources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasourceServer).DeleteDatasources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.Datasource/DeleteDatasources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasourceServer).DeleteDatasources(ctx, req.(*DeleteDatasourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Datasource_ServiceDesc is the grpc.ServiceDesc for Datasource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Datasource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datasource.Datasource",
	HandlerType: (*DatasourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDatasources",
			Handler:    _Datasource_ListDatasources_Handler,
		},
		{
			MethodName: "DeleteDatasources",
			Handler:    _Datasource_DeleteDatasources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/proto/datasource/datasource.proto",
}
