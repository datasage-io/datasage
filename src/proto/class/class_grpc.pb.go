// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: class/class.proto

package class

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClassClient is the client API for Class service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassClient interface {
	AddClass(ctx context.Context, in *CreateClassRequest, opts ...grpc.CallOption) (Class_AddClassClient, error)
	ListClass(ctx context.Context, in *ListClassRequest, opts ...grpc.CallOption) (Class_ListClassClient, error)
	DeleteClass(ctx context.Context, in *DeleteClassRequest, opts ...grpc.CallOption) (Class_DeleteClassClient, error)
}

type classClient struct {
	cc grpc.ClientConnInterface
}

func NewClassClient(cc grpc.ClientConnInterface) ClassClient {
	return &classClient{cc}
}

func (c *classClient) AddClass(ctx context.Context, in *CreateClassRequest, opts ...grpc.CallOption) (Class_AddClassClient, error) {
	stream, err := c.cc.NewStream(ctx, &Class_ServiceDesc.Streams[0], "/class.Class/AddClass", opts...)
	if err != nil {
		return nil, err
	}
	x := &classAddClassClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Class_AddClassClient interface {
	Recv() (*ClassMessageResponse, error)
	grpc.ClientStream
}

type classAddClassClient struct {
	grpc.ClientStream
}

func (x *classAddClassClient) Recv() (*ClassMessageResponse, error) {
	m := new(ClassMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *classClient) ListClass(ctx context.Context, in *ListClassRequest, opts ...grpc.CallOption) (Class_ListClassClient, error) {
	stream, err := c.cc.NewStream(ctx, &Class_ServiceDesc.Streams[1], "/class.Class/ListClass", opts...)
	if err != nil {
		return nil, err
	}
	x := &classListClassClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Class_ListClassClient interface {
	Recv() (*ListClassResponse, error)
	grpc.ClientStream
}

type classListClassClient struct {
	grpc.ClientStream
}

func (x *classListClassClient) Recv() (*ListClassResponse, error) {
	m := new(ListClassResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *classClient) DeleteClass(ctx context.Context, in *DeleteClassRequest, opts ...grpc.CallOption) (Class_DeleteClassClient, error) {
	stream, err := c.cc.NewStream(ctx, &Class_ServiceDesc.Streams[2], "/class.Class/DeleteClass", opts...)
	if err != nil {
		return nil, err
	}
	x := &classDeleteClassClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Class_DeleteClassClient interface {
	Recv() (*ClassMessageResponse, error)
	grpc.ClientStream
}

type classDeleteClassClient struct {
	grpc.ClientStream
}

func (x *classDeleteClassClient) Recv() (*ClassMessageResponse, error) {
	m := new(ClassMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClassServer is the server API for Class service.
// All implementations must embed UnimplementedClassServer
// for forward compatibility
type ClassServer interface {
	AddClass(*CreateClassRequest, Class_AddClassServer) error
	ListClass(*ListClassRequest, Class_ListClassServer) error
	DeleteClass(*DeleteClassRequest, Class_DeleteClassServer) error
	mustEmbedUnimplementedClassServer()
}

// UnimplementedClassServer must be embedded to have forward compatible implementations.
type UnimplementedClassServer struct {
}

func (UnimplementedClassServer) AddClass(*CreateClassRequest, Class_AddClassServer) error {
	return status.Errorf(codes.Unimplemented, "method AddClass not implemented")
}
func (UnimplementedClassServer) ListClass(*ListClassRequest, Class_ListClassServer) error {
	return status.Errorf(codes.Unimplemented, "method ListClass not implemented")
}
func (UnimplementedClassServer) DeleteClass(*DeleteClassRequest, Class_DeleteClassServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteClass not implemented")
}
func (UnimplementedClassServer) mustEmbedUnimplementedClassServer() {}

// UnsafeClassServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassServer will
// result in compilation errors.
type UnsafeClassServer interface {
	mustEmbedUnimplementedClassServer()
}

func RegisterClassServer(s grpc.ServiceRegistrar, srv ClassServer) {
	s.RegisterService(&Class_ServiceDesc, srv)
}

func _Class_AddClass_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateClassRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClassServer).AddClass(m, &classAddClassServer{stream})
}

type Class_AddClassServer interface {
	Send(*ClassMessageResponse) error
	grpc.ServerStream
}

type classAddClassServer struct {
	grpc.ServerStream
}

func (x *classAddClassServer) Send(m *ClassMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Class_ListClass_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListClassRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClassServer).ListClass(m, &classListClassServer{stream})
}

type Class_ListClassServer interface {
	Send(*ListClassResponse) error
	grpc.ServerStream
}

type classListClassServer struct {
	grpc.ServerStream
}

func (x *classListClassServer) Send(m *ListClassResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Class_DeleteClass_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeleteClassRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClassServer).DeleteClass(m, &classDeleteClassServer{stream})
}

type Class_DeleteClassServer interface {
	Send(*ClassMessageResponse) error
	grpc.ServerStream
}

type classDeleteClassServer struct {
	grpc.ServerStream
}

func (x *classDeleteClassServer) Send(m *ClassMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Class_ServiceDesc is the grpc.ServiceDesc for Class service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Class_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "class.Class",
	HandlerType: (*ClassServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddClass",
			Handler:       _Class_AddClass_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListClass",
			Handler:       _Class_ListClass_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteClass",
			Handler:       _Class_DeleteClass_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "class/class.proto",
}
